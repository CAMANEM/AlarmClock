#include "sys/alt_stdio.h"
#include "stdio.h"
#include "system.h"
#include "sys/alt_irq.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_pio_regs.h"
#include "io.h" // Necesario para IORD y IOWR
#include <stdbool.h>

int clkTime = 235950; // hora de reloj en formato HHMMSS
int alarmTime = 0; // hora de alarma en formato HHMMSS
short select = 0; // seleccion de ajuste 0: segundos, 1: minutos, 2: hora
bool ringing = false;

volatile unsigned short *led_seconds_units = (unsigned short *) 0x30c0;
volatile unsigned short *led_seconds_tens = (unsigned short *) 0x30b0;
volatile unsigned short *led_minutes_units = (unsigned short *) 0x3070;
volatile unsigned short *led_minutes_tens = (unsigned short *) 0x30a0;
volatile unsigned short *led_hour_units = (unsigned short *) 0x3090;
volatile unsigned short *led_hour_tens = (unsigned short *) 0x3080;
volatile unsigned short *sw_state = (unsigned short *) 0x3050;
volatile unsigned short *btn_state = (unsigned short *) 0x3060;
volatile unsigned short *buzzer = (unsigned short *) 0x3040;

void initTimerInterrupt();
void initInputTimerInterrupt();
static void timer_isr(void *context, alt_u32 id);
static void inputTimerIsr(void *context, alt_u32 id);
short switch0();
short switch1();
short alarmOn();

//short btn1_true();
void clkController();
void normalMode();
void configMode(int *time);
void checkSelect();
short increaseTimeBtn();

int getHour(int *time);
int getMinutes(int *time);
int getSeconds(int *time);
void increaseHour(int *time);
void increaseMinutes(int *time);
void increaseSeconds(int *time);
void displayTime(int *time);

// Función para convertir segundos en el valor de LEDs
unsigned short get_led_value(short sec) {
    switch (sec) {
        case 0:  return 0b1000000;
        case 1:  return 0b1111001;
        case 2:  return 0b0100100;
        case 3:  return 0b0110000;
        case 4:  return 0b0011001;
        case 5:  return 0b0010010;
        case 6:  return 0b0000010;
        case 7:  return 0b1111000;
        case 8:  return 0b0000000;
        case 9:  return 0b0010000;
        default: return 0b1000000;
    }
}

int main()
{ 
    alt_putstr("Program initialized successfully \n");
    initTimerInterrupt();
    initInputTimerInterrupt();
    *buzzer = 0; // se asegura de que la alarma inicie estando apagada
	while (1) {
		// Aquí podría ir otro código si fuera necesario
	}

    return 0;
}

void initTimerInterrupt()
{
    // Registra la ISR con HAL
    alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void *)timer_isr, NULL, 0x0);

    // Inicia el temporizador
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
            | ALTERA_AVALON_TIMER_CONTROL_START_MSK
            | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}

void initInputTimerInterrupt(){
	// Registra la ISR con HAL
	    alt_ic_isr_register(INPUT_TIMER_IRQ_INTERRUPT_CONTROLLER_ID, INPUT_TIMER_IRQ, (void *)inputTimerIsr, NULL, 0x0);

	    // Inicia el temporizador
	    IOWR_ALTERA_AVALON_TIMER_CONTROL(INPUT_TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
	            | ALTERA_AVALON_TIMER_CONTROL_START_MSK
	            | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}

static void timer_isr(void *context, alt_u32 id)
{
    alt_putstr("Normal1 \n");


	// Limpia la interrupción
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
}

static void inputTimerIsr(void *context, alt_u32 id){
    alt_putstr("Este ees el nueeevooo NUEVO \n");

	clkController();
	// Limpia la interrupción
	IOWR_ALTERA_AVALON_TIMER_STATUS(INPUT_TIMER_BASE, 0);
}

void clkController()
{
	// modo confuguracion de hora
	if (switch0())
	{
		displayTime(&clkTime);
		configMode(&clkTime);
	}
	else if (switch1()) // modo congiguracion de alarma
	{
		displayTime(&alarmTime);
		configMode(&alarmTime);
	}
	else // modo reloj normal
	{
		normalMode();
	}
}

void displayTime(int *time)
{
	*led_seconds_units = get_led_value(getSeconds(time) % 10); // Obtiene el valor correspondiente a los LEDs
	*led_seconds_tens = get_led_value(getSeconds(time) / 10); // Obtiene el valor correspondiente a los LEDs
	*led_minutes_units = get_led_value(getMinutes(time) % 10);
	*led_minutes_tens = get_led_value(getMinutes(time) / 10);
	*led_hour_units = get_led_value(getHour(time) % 10);
	*led_hour_tens = get_led_value(getHour(time) / 10);
}


void normalMode()
{
	increaseSeconds(&clkTime);
	displayTime(&clkTime);

	if (ringing && !alarmOn())
	{
		// se ha desactivado la alarma
		ringing = false;
		*buzzer = 0;
		//alt_putstr("The alarm has been turned off!\n");
	}
	else if (alarmOn() && ((clkTime / 100) == (alarmTime / 100)))
	{
		// Se activó la alarma!!
		ringing = true;
		*buzzer = 1;
		//alt_putstr("The alarm has been turned ON!\n");
	}
}

// Switch1 esta activado y está en modo cambio de hora
short switch0()
{
    unsigned short switch_value = IORD(sw_state, 0);

    return (switch_value & 0x1) ? 1 : 0;

}

// Switch1 esta activado y está en modo cambio de hora de alarma
short switch1()
{
	unsigned short switch_value = IORD(sw_state, 0);
	unsigned short switch1_value = (switch_value >> 1) & 0x1; // Segundo switch (bit 1)

	return switch1_value;

}

// Switch2 esta activado y se desea activar o desactivar la alarma
short alarmOn()
{
    unsigned short switch_value = IORD(sw_state, 0);
    unsigned short switch2_value = (switch_value >> 2) & 0x1; // Tercer switch (bit 2)

	return switch2_value;

}


/*
short btn1_true()
{
    unsigned short button_value = IORD(btn_state, 0);

    return (button_value & 0x1) ? 1 : 0;

}
*/

// ocurre cuando el boton derecho (KEY0) ha sido presionando. Valida que se pueda aumentar la hora si el boton esta presionado
short increaseTimeBtn()
{
    unsigned short button_value = IORD(btn_state, 0);

    return (button_value & 0x1) ? 0 : 1;

}

// valida la presion del boton de selecion de horas, minutos o segundos para poder seleccionar la siguiente opcion
void checkSelect()
{
    unsigned short button_value = IORD(btn_state, 0);

    unsigned short next = !((button_value >> 1) & 0x1);
    if (next)
    {
    	select = (select + 1) % 3;
    }
}

// modo de configuracion de hora, permite cambiar la hora
void configMode(int *time)
{
	checkSelect();

	if (increaseTimeBtn())
	{
		switch (select)
		{
		        case 0:
		        	increaseSeconds(time);
		        	break;
		        case 1:
		        	increaseMinutes(time);
		        	break;
		        case 2:
		        	increaseHour(time);
		        	break;
		}
	}
}




int getHour(int *time) {
    return *time / 10000;
}

// Función para obtener los minutos de un entero en formato HHMMSS
int getMinutes(int *time) {
    return (*time / 100) % 100;
}

// Función para obtener los segundos de un entero en formato HHMMSS
int getSeconds(int *time) {
    return *time % 100;
}

// Función para establecer la hora en un entero en formato HHMMSS
// aumenta solo la hora en +1 hasta un maximo de 23
// y despues de 23 reinicia en 0
void increaseHour(int *time) {
    *time = (*time % 10000) + ((getHour(time) + 1) % 24) * 10000; // (getHour(time) + 1) % 24): aumenta el tiempo en +1 hasta 23. Luego reinicia a 00
}

// Función para establecer los minutos en un entero en formato HHMMSS
void increaseMinutes(int *time) {
	// config mode: only affects time minutes
	if (switch0())
	{
		*time = (*time / 10000) * 10000 + ((getMinutes(time) + 1) % 60 * 100) + getSeconds(time);
	}
	// normal hour. increase minutes could affect hour
	else
	{
		if (getMinutes(time) == 59)
		{
			increaseHour(time);
		}
		*time = (*time / 10000) * 10000 + ((getMinutes(time) + 1) % 60 * 100) + getSeconds(time);
	}
}

// Función para establecer los segundos en un entero en formato HHMMSS
void increaseSeconds(int *time) {
	// config mode: only affects time seconds
	if (switch0())
	{
		*time = (*time / 100) * 100 + ((getSeconds(time) + 1) % 60);
	}
	// normal clock mode that could affect minutes
	else
	{
		if (getSeconds(time) == 59)
		{
			increaseMinutes(time);
		}
		*time = (*time / 100) * 100 + ((getSeconds(time) + 1) % 60);
	}
}



/*
void check_switches()
{
    unsigned short switch_value = IORD(sw_state, 0);

    unsigned short switch1 = switch_value & 0x1; // Primer switch (bit 0)
    unsigned short switch2 = (switch_value >> 1) & 0x1; // Segundo switch (bit 1)
    unsigned short switch3 = (switch_value >> 2) & 0x1; // Tercer switch (bit 2)


    if (switch1) {
        alt_putstr("SW I!\n");
    }

    if (switch2) {
    	alt_putstr("SW II!\n");
    }

    if (switch3) {
    	alt_putstr("SW III!\n");
    }
}
*/
